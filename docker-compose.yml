version: "3.9"

services:
  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    command:
      - "http"
      - "--url=${NGROK_URL}"
      - "backend:5000"
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    depends_on:
      - backend

  # nginx:
  #   image: nginx:alpine
  #   container_name: nginx-proxy
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
  #     - ./certs:/etc/nginx/certs
  #   depends_on:
  #     - backend

  db:
    image: postgres:14
    container_name: pg-docker
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

  backend:
    build: ./backend
    container_name: flask-backend
    expose:
      - "5000"
    volumes:
      - ./backend:/app
    depends_on:
      - db
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    develop:
      watch:
        - action: rebuild
          path: ./backend

volumes:
  pgdata:
